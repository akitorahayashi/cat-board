# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#     https://docs.fastlane.tools/plugins/available-plugins

default_platform(:ios)

# Constants for common configurations
PROJECT_PATH = "../CatBoardApp.xcodeproj"
MAIN_SCHEME = "CatBoardApp"
UNIT_TEST_SCHEME = "CatBoardTests"
UI_TEST_SCHEME = "CatBoardUITests"

# Build and test paths
BUILD_DIR = "build"
DERIVED_DATA_PATH = "#{BUILD_DIR}/test-results/DerivedData"
UNIT_TEST_RESULTS_PATH = "#{BUILD_DIR}/test-results/unit/TestResults.xcresult"
UI_TEST_RESULTS_PATH = "#{BUILD_DIR}/test-results/ui/TestResults.xcresult"
ARCHIVE_PATH = "#{BUILD_DIR}/archives/CatBoardApp.xcarchive"

# Swift package directories
SWIFT_PACKAGES = [
  "CatImageURLRepository",
  "CatImageScreener",
  "CatImagePrefetcher"
]

platform :ios do

desc "Get simulator information based on environment"
lane :get_simulator_info do
  udid = ENV['LOCAL_SIMULATOR_UDID']
  if udid.nil? || udid.empty?
  end
  Actions.lane_context[:SIMULATOR_UDID] = udid
end

desc "Build for testing"
lane :build_for_testing do
  get_simulator_info
  udid = Actions.lane_context[:SIMULATOR_UDID]
  sh "rm -rf #{UNIT_TEST_RESULTS_PATH}"
  sh "xcodebuild build-for-testing \
    -project #{PROJECT_PATH} \
    -scheme #{MAIN_SCHEME} \
    -destination 'platform=iOS Simulator,id=#{udid}' \
    -configuration Debug \
    -skipMacroValidation \
    CODE_SIGNING_ALLOWED=NO \
    | xcbeautify"
end


  desc "Build debug configuration"
  lane :build_debug do
    get_simulator_info
    udid = Actions.lane_context[:SIMULATOR_UDID]
    sh("rm -rf #{BUILD_DIR}/debug")
    sh("mkdir -p #{BUILD_DIR}/debug")
    sh("set -o pipefail && xcodebuild build \
      -project #{PROJECT_PATH} \
      -scheme #{MAIN_SCHEME} \
      -destination 'platform=iOS Simulator,id=#{udid}' \
      -derivedDataPath #{BUILD_DIR}/debug/DerivedData \
      -configuration Debug \
      -skipMacroValidation \
      CODE_SIGNING_ALLOWED=NO \
      | xcbeautify")
  end

  desc "Build release configuration"
  lane :build_release do
    get_simulator_info
    udid = Actions.lane_context[:SIMULATOR_UDID]
    sh("rm -rf #{BUILD_DIR}/release")
    sh("mkdir -p #{BUILD_DIR}/release")
    sh("set -o pipefail && xcodebuild build \
      -project #{PROJECT_PATH} \
      -scheme #{MAIN_SCHEME} \
      -destination 'platform=iOS Simulator,id=#{udid}' \
      -derivedDataPath #{BUILD_DIR}/release/DerivedData \
      -configuration Release \
      -skipMacroValidation \
      CODE_SIGNING_ALLOWED=NO \
      | xcbeautify")
  end
  
  desc "Archive release build"
  lane :archive do
    get_simulator_info
    udid = Actions.lane_context[:SIMULATOR_UDID]
    sh "rm -rf #{ARCHIVE_PATH}"
    sh "xcodebuild archive \
      -project #{PROJECT_PATH} \
      -scheme #{MAIN_SCHEME} \
      -configuration Release \
      -destination 'platform=iOS Simulator,id=#{udid}' \
      -archivePath #{ARCHIVE_PATH} \
      -skipMacroValidation \
      CODE_SIGNING_ALLOWED=NO \
      | xcbeautify"
  end

  desc "Run unit tests"
  lane :unit_test do
    get_simulator_info
    udid = Actions.lane_context[:SIMULATOR_UDID]
    sh "rm -rf #{UNIT_TEST_RESULTS_PATH}"
    sh "xcodebuild test \
      -project #{PROJECT_PATH} \
      -scheme #{UNIT_TEST_SCHEME} \
      -destination 'platform=iOS Simulator,id=#{udid}' \
      -derivedDataPath #{DERIVED_DATA_PATH} \
      -enableCodeCoverage NO \
      -resultBundlePath #{UNIT_TEST_RESULTS_PATH} \
      -skipMacroValidation \
      CODE_SIGNING_ALLOWED=NO \
      | xcbeautify"
  end

  desc "Run unit tests without building"
  lane :unit_test_without_building do
    get_simulator_info
    udid = Actions.lane_context[:SIMULATOR_UDID]
    sh "rm -rf #{UNIT_TEST_RESULTS_PATH}"
    sh "xcodebuild test-without-building \
      -project #{PROJECT_PATH} \
      -scheme #{UNIT_TEST_SCHEME} \
      -destination 'platform=iOS Simulator,id=#{udid}' \
      -derivedDataPath #{DERIVED_DATA_PATH} \
      -enableCodeCoverage NO \
      -resultBundlePath #{UNIT_TEST_RESULTS_PATH} \
      -skipMacroValidation \
      CODE_SIGNING_ALLOWED=NO \
      | xcbeautify"
  end

  desc "Run UI tests"
  lane :ui_test do
    get_simulator_info
    udid = Actions.lane_context[:SIMULATOR_UDID]
    sh "rm -rf #{UI_TEST_RESULTS_PATH}"
    sh "xcodebuild test \
      -project #{PROJECT_PATH} \
      -scheme #{UI_TEST_SCHEME} \
      -destination 'platform=iOS Simulator,id=#{udid}' \
      -derivedDataPath #{DERIVED_DATA_PATH} \
      -enableCodeCoverage NO \
      -resultBundlePath #{UI_TEST_RESULTS_PATH} \
      -skipMacroValidation \
      CODE_SIGNING_ALLOWED=NO \
      | xcbeautify"
  end

  desc "Run UI tests without building (xcodebuild test-without-building)"
  lane :ui_test_without_building do
    get_simulator_info
    udid = Actions.lane_context[:SIMULATOR_UDID]
    sh "rm -rf #{UI_TEST_RESULTS_PATH}"
    sh "xcodebuild test-without-building \
      -project #{PROJECT_PATH} \
      -scheme #{UI_TEST_SCHEME} \
      -destination 'platform=iOS Simulator,id=#{udid}' \
      -derivedDataPath #{DERIVED_DATA_PATH} \
      -enableCodeCoverage NO \
      -resultBundlePath #{UI_TEST_RESULTS_PATH} \
      -skipMacroValidation \
      CODE_SIGNING_ALLOWED=NO \
      | xcbeautify"
  end

  desc "Run Swift package tests (CatImageURLRepository, CatImageScreener, CatImagePrefetcher)"
  lane :package_test do
    SWIFT_PACKAGES.each do |package|
      sh "cd #{package} && swift test | xcbeautify"
    end
  end

  desc "Run all tests (unit, UI, package)"
  lane :test_all do
    build_for_testing
    unit_test
    ui_test
    package_test
  end
end
