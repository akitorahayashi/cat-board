# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#     https://docs.fastlane.tools/plugins/available-plugins
#
default_platform(:ios)

# Constants for common configurations
PROJECT_PATH = "CatBoardApp.xcodeproj"
MAIN_SCHEME = "CatBoardApp"
UNIT_TEST_SCHEME = "CatBoardTests"
UI_TEST_SCHEME = "CatBoardUITests"

CONFIGURATIONS = {
  debug: "Debug",
  release: "Release",
}.freeze


BUILD_DIR = "build"
TEST_RESULTS_PATH = "#{BUILD_DIR}/test-results"
DEBUG_BUILD_PATH = "#{BUILD_DIR}/debug/CatBoardApp.xcarchive"
RELEASE_BUILD_PATH = "#{BUILD_DIR}/release/CatBoardApp.xcarchive"
ARCHIVE_BUILD_PATH = "#{BUILD_DIR}/archives/CatBoardApp.xcarchive"

# Export method enum-like config
EXPORT_METHODS = {
  none: "none",
  app_store: "app-store",
  ad_hoc: "ad-hoc",
  enterprise: "enterprise",
  development: "development",
  developer_id: "developer-id"
}.freeze

# Swift package directories
SWIFT_PACKAGES = [
  "CatImageURLRepository",
  "CatImageScreener",
  "CatImagePrefetcher",
]

platform :ios do

# === Public Lanes ===

  desc "Run unit tests"
  lane :unit_test do
    test_with_scheme(scheme: UNIT_TEST_SCHEME, result_path: "#{TEST_RESULTS_PATH}/unit/TestResults.xcresult")
  end

  desc "Run unit tests without building"
  lane :unit_test_without_building do
    test_without_building_with_scheme(scheme: UNIT_TEST_SCHEME, result_path: "#{TEST_RESULTS_PATH}/unit/TestResults.xcresult")
  end

  desc "Run UI tests"
  lane :ui_test do
    test_with_scheme(scheme: UI_TEST_SCHEME, result_path: "#{TEST_RESULTS_PATH}/ui/TestResults.xcresult")
  end

  desc "Run UI tests without building (xcodebuild test-without-building)"
  lane :ui_test_without_building do
    test_without_building_with_scheme(scheme: UI_TEST_SCHEME, result_path: "#{TEST_RESULTS_PATH}/ui/TestResults.xcresult")
  end

  desc "Run Swift package tests (CatImageURLRepository, CatImageScreener, CatImagePrefetcher)"
  lane :package_test do
    SWIFT_PACKAGES.each do |package|
      sh "cd ../#{package} && swift test"
    end
  end

  desc "Run all tests (unit, UI, package)"
  lane :test_all do
    build_for_testing
    unit_test_without_building
    ui_test_without_building
    package_test
  end

  desc "Build for testing"
  lane :build_for_testing do
    get_simulator_info
    udid = Actions.lane_context[:SIMULATOR_UDID]
    scan(
      project: PROJECT_PATH,
      scheme: MAIN_SCHEME,
      destination: "platform=iOS Simulator,id=#{udid}",
      derived_data_path: "#{TEST_RESULTS_PATH}/DerivedData",
      configuration: CONFIGURATIONS[:debug],
      build_for_testing: true,
      clean: true,
      codesigning_identity: "",
      code_signing_style: "Manual"
    )
  end

  desc "Build debug configuration"
  lane :build_debug do
    build_app_with_config(
      configuration: CONFIGURATIONS[:debug],
      archive_path: DEBUG_BUILD_PATH,
      export_method: EXPORT_METHODS[:none]
    )
  end

  desc "Build release configuration"
  lane :build_release do
    build_app_with_config(
      configuration: CONFIGURATIONS[:release],
      archive_path: RELEASE_BUILD_PATH,
      export_method: EXPORT_METHODS[:none]
    )
  end

  desc "Archive release build"
  lane :archive do
    build_app_with_config(
      configuration: CONFIGURATIONS[:release],
      archive_path: ARCHIVE_BUILD_PATH,
      export_method: EXPORT_METHODS[:none]
    )
  end

# === Private ===

  desc "Get simulator information based on environment"
  private_lane :get_simulator_info do
    udid = nil
    if ENV['CI'] == 'true'
      udid = sh("xcrun simctl list devices available | grep -A1 'iPhone' | grep -Eo '[A-F0-9-]{36}' | head -n 1").strip
      if udid.nil? || udid.empty?
        UI.user_error!("CI環境で利用可能なiPhoneシミュレータのUDIDが取得できませんでした")
      end
    else
      udid = ENV['LOCAL_SIMULATOR_UDID']
      if udid.nil? || udid.empty?
        UI.user_error!("LOCAL_SIMULATOR_UDIDが設定されていません。環境変数をセットしてください")
      end
    end
    Actions.lane_context[:SIMULATOR_UDID] = udid
  end

  desc "Build with specified configuration"
  private_lane :build_app_with_config do |options|
    export_method = options[:export_method] || EXPORT_METHODS[:none]
    unless EXPORT_METHODS.values.include?(export_method)
      UI.user_error!("Invalid export_method: #{export_method}. Must be one of #{EXPORT_METHODS.values.join(', ')}")
    end
    build_app(
      project: PROJECT_PATH,
      scheme: MAIN_SCHEME,
      configuration: options[:configuration],
      archive_path: options[:archive_path],
      clean: true,
      skip_codesigning: true,
      export_method: export_method,
      xcargs: "SKIP_MACRO_VALIDATION=YES"
    )
  end

  desc "Run test for a given scheme"
  private_lane :test_with_scheme do |options|
    get_simulator_info
    udid = Actions.lane_context[:SIMULATOR_UDID]
    scan(
      project: PROJECT_PATH,
      scheme: options[:scheme],
      destination: "platform=iOS Simulator,id=#{udid}",
      derived_data_path: "#{TEST_RESULTS_PATH}/DerivedData",
      result_bundle_path: options[:result_path],
      code_coverage: false,
      clean: true,
      skip_codesigning: true,
      xcargs: "SKIP_MACRO_VALIDATION=YES"
    )
  end

  desc "Run test-without-building for a given scheme"
  private_lane :test_without_building_with_scheme do |options|
    get_simulator_info
    udid = Actions.lane_context[:SIMULATOR_UDID]
    scan(
      project: PROJECT_PATH,
      scheme: options[:scheme],
      destination: "platform=iOS Simulator,id=#{udid}",
      derived_data_path: "#{TEST_RESULTS_PATH}/DerivedData",
      result_bundle_path: options[:result_path],
      code_coverage: false,
      test_without_building: true,
      skip_codesigning: true,
      xcargs: "SKIP_MACRO_VALIDATION=YES"
    )
  end
end